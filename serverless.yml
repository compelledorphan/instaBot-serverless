service: thexperimentlab

plugins:
  - serverless-iam-roles-per-function
  - serverless-pseudo-parameters
  - serverless-python-requirements
custom:
  stage: dev
  name: thexperimentlab
  tableThroughput: 1
  scannedTable: scannedTable--${self:custom.name}
  accountTable: accountTable--${self:custom.name}
  usersTable: usersTable--${self:custom.name}

provider:
  name: aws
  runtime: python3.6
  region: eu-west-1
  #Configure the bot by editing the env variables below
  environment:
    username: 
    password:
    rateLimitsFollow: 100
    rateLimitsComment: 50
    rateLimitsLike: 50
    unfollowAll: 'False'
    hashtags: coding|programador|robots|computer|hacking
    
    scannedTable: scannedTable--${self:custom.name}
    accountTable: accountTable--${self:custom.name}
    usersTable: usersTable--${self:custom.name}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - arn:aws:dynamodb:${self:provider.region}:#{AWS::AccountId}:table/${self:custom.scannedTable}
        - arn:aws:dynamodb:${self:provider.region}:#{AWS::AccountId}:table/${self:custom.accountTable}
        - arn:aws:dynamodb:${self:provider.region}:#{AWS::AccountId}:table/${self:custom.usersTable}

functions:
  instaBot:
    name: instaBot--${self:custom.name}
    handler: src/instaBot.instaBot
    events:
          - schedule: rate(30 minutes)
    timeout: 900 
    reservedConcurrency: 1

  follow:
    name: follow--${self:custom.name}
    handler: src/follow.follow
    events:
          - schedule: rate(5 minutes)
    timeout: 10 
    reservedConcurrency: 1

  unfollow:
    name: unfollow--${self:custom.name}
    handler: src/unfollow.unfollow
    events:
          - schedule: rate(5 minutes)
    timeout: 10 
    reservedConcurrency: 1

  comment:
    name: comment--${self:custom.name}
    handler: src/comment.comment
    events:
          - schedule: rate(5 minutes)
    timeout: 10 
    reservedConcurrency: 1

  like:
    name: like--${self:custom.name}
    handler: src/like.like
    events:
          - schedule: rate(5 minutes)
    timeout: 10 
    reservedConcurrency: 1

resources:
  Resources:
    usersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.usersTable}
        AttributeDefinitions:
          - AttributeName: username
            AttributeType: S
          - AttributeName: pk
            AttributeType: N
        KeySchema:
          - AttributeName: username
            KeyType: HASH
          - AttributeName: pk
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: ${self:custom.tableThroughput}
          WriteCapacityUnits: ${self:custom.tableThroughput}

    scannedTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.scannedTable}
        AttributeDefinitions:
          - AttributeName: username
            AttributeType: S
          - AttributeName: pk
            AttributeType: N
        KeySchema:
          - AttributeName: username
            KeyType: HASH
          - AttributeName: pk
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: ${self:custom.tableThroughput}
          WriteCapacityUnits: ${self:custom.tableThroughput}

    accountTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.accountTable}
        AttributeDefinitions:
          - AttributeName: date
            AttributeType: S
          - AttributeName: username
            AttributeType: S
        KeySchema:
          - AttributeName: date
            KeyType: HASH
          - AttributeName: username
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: ${self:custom.tableThroughput}
          WriteCapacityUnits: ${self:custom.tableThroughput}
